# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h0dm7JgiKxX_Ar10GG08YpTFDxTULIVV
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from numpy import zeros

#Mean Filter
def mean_filter(a1,a2,a3,a4,a5,a6,a7,a8,a9):
    res = (a1/9+ a2/9 + a3/9 + a4/9 + a5/9 + a6/9 + a7/9 + a8/9 + a9/9)
    return res

#Median Filter
def median_filter(a1,a2,a3,a4,a5,a6,a7,a8,a9):
    arr = [a1,a2,a3,a4,a5,a6,a7,a8,a9]
    res = np.median(arr)
    return res

#Prewitt_ Gx Filter
def prewitt_filter_gx(a1,a2,a3,a4,a5,a6,a7,a8,a9):
    res = ((-1*a1) + (-1*a2) + (-1*a3) + a7 + a8 + a9)
    return res

#Prewitt_ Gy Filter
def prewitt_filter_gy(a1,a2,a3,a4,a5,a6,a7,a8,a9):
    res = ((a1- a3 + a4 - a6 + a7 - a9))
    return res

#Laplacian Filter
def laplacian(a1,a2,a3,a4,a5,a6,a7,a8,a9):
    res = (a2 + a4 -a5 -a5-a5-a5+ a6 + a8)
    return res

#Shovel_Horizontal Filter
def shovel_hor_filter(a1,a2,a3,a4,a5,a6,a7,a8,a9):
    res = (-1*a1 + a3 -2* a4 + 2* a6 -1*a7 + a9)
    return res

#Shovel_Vertical Filter
def shovel_ver_filter(a1,a2,a3,a4,a5,a6,a7,a8,a9):
    res = (-1*a1 -2*a2 -1*a3+ a7 + 2*a8 + a9)
    return res

#Shovel_Diagonal Filter
def shovel_dia_filter(a1,a2,a3,a4,a5,a6,a7,a8,a9):
    res = (-1*a2/9-2*a3/9+a4/9+-1*a6/9+2*a7/9+a8/9)*9
    return res

#Gaussian Blur Filter
def gaussian_blur_filter(a1,a2,a3,a4,a5,a6,a7,a8,a9):
    res = (a1/16+ 2*a2/16 + a3/16 + 2*a4/16 + 4*a5/16 + 2*a6/16 + a7/16 + 2*a8/16 + a9/16)
    return res


# Laplacian of Gaussian Filter
def laplacian_of_gaussian(a1, a2, a3, a4, a5, a6, a7, a8, a9):
    res = (1*a1+1*a2+1*a3+1*a4-8*a5+1*a6+1*a7+1*a8+1*a9)
    return res

#For Gaussian FIlter
def gaussian_filter(a1, a2, a3, a4, a5, a6, a7, a8, a9):
    res = (368*a1/6285+606*a2/6285+368*a3/6285+606*a4/6285+1000*a5/6285+606*a6/6285+368*a7/6285+606*a8/6285+368*a9/6285)
    return res%255

#Function to divide pixel by pixel
def divide_image(img1,img2):
    temp = img1
    for i in range(len(img1[0])):
        for j in range(len(img1)):
            temp[i][j] = img1[i][j] / img2[i][j]
    return temp

#Main Function to make unblur
def gaussian_unblur(img):
    h1 = len(img)
    w1 = len(img[0])
    # Creating a Dummy IMAGE img_Ak
    img_Ak = np.zeros([h1+2, w1+2, 3] )#, dtype=np.uint8)
    img_Ak.fill(150)
    # Creating a Dummy IMAGE img_Bk
    img_Bk = np.zeros([h1+2 , w1+2, 3])#, dtype=np.uint8)
    img_Bk.fill(150)
    # Creating a Dummy IMAGE img_Ck
    img_Ck = np.zeros([h1+2, w1+2, 3])#, dtype=np.uint8)
    img_Ck.fill(150)
    # Creating a Dummy IMAGE img_Ik
    img_Ik = np.zeros([h1+2, w1+2, 3])#, dtype=np.uint8)
    img_Ck.fill(150)

    for y in range(0, h1 ):
        for x in range(0, w1 ):
            img_Ik[y, x] = img[y,x]

    for k in range(0,2):
        # Calling Gaussian Filter
        for y in range(1, h1 - 1):
            for x in range(1, w1 - 1):
                img_Ak[y, x] = gaussian_filter(img_Ik[y - 1, x - 1], img_Ik[y - 1, x], img_Ik[y - 1, x + 1], img_Ik[y, x - 1],
                                             img_Ik[y, x], img_Ik[y, x + 1], img_Ik[y + 1, x - 1], img_Ik[y + 1, x],
                                             img_Ik[y + 1, x + 1])
        for y in range(1, h1 - 1):
            for x in range(1, w1 - 1):
                img_Bk[y, x] = img[y][x]/(img_Ak[y][x]+0.01)

        for y in range(1, h1 - 1):
            for x in range(1, w1 - 1):
                img_Ck[y, x] = gaussian_filter(img_Bk[y - 1, x - 1], img_Bk[y - 1, x], img_Bk[y - 1, x + 1], img_Bk[y, x - 1],
                                             img_Bk[y, x], img_Bk[y, x + 1], img_Bk[y + 1, x - 1], img_Bk[y + 1, x],
                                             img_Bk[y + 1, x + 1])

        for y in range(1, h1 - 1):
            for x in range(1, w1 - 1):
                img_Ik[y, x] = img[y][x] * img_Ck[y][x]



    return img_Ik

#Reading and displaying the Original Image
img = cv2.imread("C:/Users/91801/Documents/Personal Docs/MTECH/IIT Kgp Course/DVIP Lab/Assignment 4/Normal Images/lena_gray_512.jpg")
img= np.array(img)
cv2.imshow("Suraj.jpg", img)
h1 = len(img)
w1 = len(img[0])
cv2.waitKey(0)


#Creating a Dummy IMAGE img2
img2 = np.zeros([h1+2,w1+2,3],dtype=np.uint8)
img2.fill(150)
img2= np.array(img2)



#Calling for Mean FIlter
for y in range(1,h1-1):
    for x in range(1,w1-1):
        img2[y,x] = mean_filter(img[y-1,x-1],img[y-1,x],img[y-1,x+1],img[y,x-1],img[y,x],img[y,x+1],img[y+1,x-1],img[y+1,x],img[y+1,x+1])

cv2.imshow("Result.jpg",img2)
cv2.waitKey(0)
cv2.imwrite("Mean_Pepper_Gaussian_0.01.jpg",img2)

#Calling for Mean FIlter
for y in range(1,h1-1):
    for x in range(1,w1-1):
        img2[y,x] = median_filter(img[y-1,x-1],img[y-1,x],img[y-1,x+1],img[y,x-1],img[y,x],img[y,x+1],img[y+1,x-1],img[y+1,x],img[y+1,x+1])

cv2.imshow("Result_2.jpg",img2)
cv2.waitKey(0)
cv2.imwrite("Median_Pepper_Gaussian_0.01.jpg",img2)


#Calling for Prewitt_Gx Filter
for y in range(1,h1-1):
    for x in range(1,w1-1):
        img2[y,x] = prewitt_filter_gx(img[y-1,x-1],img[y-1,x],img[y-1,x+1],img[y,x-1],img[y,x],img[y,x+1],img[y+1,x-1],img[y+1,x],img[y+1,x+1])

cv2.imshow("Result_2.jpg",img2)
cv2.waitKey(0)
cv2.imwrite("Prewitt_gx_Pepper_Gaussian_0.01.jpg",img2)


#Calling for Prewitt_Gy Filter
for y in range(1,h1-1):
    for x in range(1,w1-1):
        img2[y,x] = prewitt_filter_gy(img[y-1,x-1],img[y-1,x],img[y-1,x+1],img[y,x-1],img[y,x],img[y,x+1],img[y+1,x-1],img[y+1,x],img[y+1,x+1])

cv2.imshow("Result_2.jpg",img2)
cv2.waitKey(0)
cv2.imwrite("Prewitt_gy_Pepper_Gaussian_0.01.jpg",img2)


#Calling for Laplacian Filter
for y in range(1,h1-1):
    for x in range(1,w1-1):
        img2[y,x] = laplacian(img[y-1,x-1],img[y-1,x],img[y-1,x+1],img[y,x-1],img[y,x],img[y,x+1],img[y+1,x-1],img[y+1,x],img[y+1,x+1])

cv2.imshow("Result_2.jpg",img2)
cv2.waitKey(0)
cv2.imwrite("Laplacian_Pepper_lake.jpg",img2)


#Calling for Shovel_Horizontal Filter
for y in range(1,h1-1):
    for x in range(1,w1-1):
        img2[y,x] = shovel_hor_filter(img[y-1,x-1],img[y-1,x],img[y-1,x+1],img[y,x-1],img[y,x],img[y,x+1],img[y+1,x-1],img[y+1,x],img[y+1,x+1])

cv2.imshow("Result_2.jpg",img2)
cv2.waitKey(0)
cv2.imwrite("shovel_hor_filter_Pepper_Gaussian_0.01.jpg",img2)


#Calling for Shovel_Vertical Filter
for y in range(1,h1-1):
    for x in range(1,w1-1):
        img2[y,x] = shovel_ver_filter(img[y-1,x-1],img[y-1,x],img[y-1,x+1],img[y,x-1],img[y,x],img[y,x+1],img[y+1,x-1],img[y+1,x],img[y+1,x+1])

cv2.imshow("Result_2.jpg",img2)
cv2.waitKey(0)
cv2.imwrite("shovel_ver_filter_Pepper_Gaussian_0.01.jpg",img2)


#Calling for Shovel_Diagonal Filter
for y in range(1,h1-1):
    for x in range(1,w1-1):
        img2[y,x] = shovel_dia_filter(img[y-1,x-1],img[y-1,x],img[y-1,x+1],img[y,x-1],img[y,x],img[y,x+1],img[y+1,x-1],img[y+1,x],img[y+1,x+1])

cv2.imshow("Result_2.jpg",img2)
cv2.waitKey(0)
cv2.imwrite("shovel_dia_filter_lake.jpg",img2)


#Calling for Gaussian_Blur Filter
for y in range(1,h1-1):
    for x in range(1,w1-1):
        img2[y,x] = gaussian_blur_filter(img[y-1,x-1],img[y-1,x],img[y-1,x+1],img[y,x-1],img[y,x],img[y,x+1],img[y+1,x-1],img[y+1,x],img[y+1,x+1])

cv2.imshow("Result_2.jpg",img2)
cv2.waitKey(0)
cv2.imwrite("Gaussian_blur_filter_lake.jpg",img2)


#Calling for Laplacian of Gaussian Filter
for y in range(1,h1-1):
    for x in range(1,w1-1):
        img2[y,x] = laplacian_of_gaussian(img[y-1,x-1],img[y-1,x],img[y-1,x+1],img[y,x-1],img[y,x],img[y,x+1],img[y+1,x-1],img[y+1,x],img[y+1,x+1])

cv2.imshow("Result_2.jpg",img2)
cv2.waitKey(0)
cv2.imwrite("LOG_filter_lake.jpg",img2)




#Calling Gaussian Filter
for y in range(1,h1-1):
    for x in range(1,w1-1):
        img2[y,x] = gaussian_filter(img[y-1,x-1],img[y-1,x],img[y-1,x+1],img[y,x-1],img[y,x],img[y,x+1],img[y+1,x-1],img[y+1,x],img[y+1,x+1])

cv2.imshow("Result_2.jpg",img2)
cv2.waitKey(0)
cv2.imwrite("Gaussian_filter_lake.jpg",img2)


img2 = gaussian_unblur(img2)
img2= np.array(img2)
#plt.imshow("Result_2.jpg", img2)
cv2.imshow("Result_2.jpg",img2)
cv2.waitKey(0)
cv2.imwrite("Gaussian_UnBlur_filter_lake.jpg",img2)

cv2.destroyAllWindows()