# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VxpNFEyKDZTVdwmarG7RCElKaXq0Zfgs
"""

import numpy as np
import matplotlib.pyplot as plt

def READBMP(file_in_bmp):
  Image_file = open(file_in_bmp, 'rb') 
  content1= Image_file.read()

  #Signature 
  sign = str(content1[0:2])
  
  if sign != "b'BM'":
    print("\nError!!! The file is not a BMP file....")
    Image_file.close()
    exit()

  else:
     #Signature 
    print("\n...BMP HEADER STRUCTURE... \nSIGNATURE :", content1[0:2])

    #1 Height
    offset_ht_hex = '16'
    size_ht = 4
    offset_ht_int = int(offset_ht_hex, 16)
    height= int.from_bytes(content1[offset_ht_int:(offset_ht_int+size_ht)], "little")
    print("HEIGHT: ", int.from_bytes(content1[offset_ht_int:(offset_ht_int+size_ht)], "little"), " pixel")

    #2 Width
    offset_wt_hex = '12'
    size_wt = 4
    offset_wt_int = int(offset_wt_hex, 16)
    width = int.from_bytes(content1[offset_wt_int:(offset_wt_int+size_ht)], "little")
    print("WIDTH: ", int.from_bytes(content1[offset_wt_int:(offset_wt_int+size_ht)], "little"), " pixel")

    #3 IMAGE Size
    offset_sz_hex = '02'
    size_sz = 4
    offset_sz_int = int(offset_sz_hex, 16)
    size= int.from_bytes(content1[offset_sz_int:(offset_sz_int+size_sz)], "little")
    print("IMAGE SIZE: ", int.from_bytes(content1[offset_sz_int:(offset_sz_int+size_sz)], "little"), "bytes")

    #4 Bit Size
    offset_bsz_hex = '1C'
    size_bsz = 2
    offset_bsz_int = int(offset_bsz_hex, 16)
    print("BIT SIZE: ", int.from_bytes(content1[offset_bsz_int:(offset_bsz_int+size_bsz)], "little")/8,"bytes per pixel")

    #5 HEADER SIZE
    offset_osz_hex = '0E'
    size_osz = 2
    offset_osz_int = int(offset_osz_hex, 16)
    print("HEADER SIZE: ", int.from_bytes(content1[offset_osz_int:(offset_osz_int+size_osz)], "little"))

    #6 OFFSET VALUE
    offset_ipz_hex = '22'
    size_ipz = 4
    offset_ipz_int = int(offset_ipz_hex, 16)
    extra_head = int.from_bytes(content1[offset_sz_int:(offset_sz_int+size_sz)], "little")-int.from_bytes(content1[offset_ipz_int:(offset_ipz_int+size_ipz)], "little")
    print("OFFSET: ",extra_head)

    #Pixel Array
    temp1=[]
    count = 0
    content2 = list(content1)
    
    while count < size-1078:
      temp1.append(content2[1078+count])
      count = count + 1
    temp2= np.array(temp1)
    temp3= temp2.reshape((height,width))
    #plt.imshow(temp3)    
    print("PIXEL ARRAY: \n",temp3)
  Image_file.close()

def WRITEBMP(output_file_name, Image_data_header, Image_data_pixel):
  file_1 = open(output_file_name, "wb")
  for i in Image_data_header:
    file_1.write(i.to_bytes(1,'big'))

  for i in Image_data_pixel:
    file_1.write(i.to_bytes(1,'big')) 
  file_1.close()


def MANUPULATION(file_name, ch, file_output_name):
  READBMP(file_name)  
  xyz = open(file_name,"rb")
  data1 = xyz.read()
  temp = list(data1)
  
  count = ch-1
  while count<=1024:
    temp[54 + count]= 0 
    count= count+4
  
  xyz.close()
  
  #xyz = open(file_output_name, 'w+b')  
  #for i in temp:
    #xyz.write(i.to_bytes(1, 'big'))
  #xyz.close()

  Image_file = open(file_in_bmp, 'rb') 
  content1= Image_file.read()
  offset_sz_hex = '02'
  size_sz = 4
  offset_sz_int = int(offset_sz_hex, 16)
  size= int.from_bytes(content1[offset_sz_int:(offset_sz_int+size_sz)], "little")
    
  temp1=[]
  count = 0
  content2 = list(content1)
 
  while count < size-1078:
    temp1.append(content2[1078+count])
    count = count + 1

  temp2=[]
  count = 0
  content3 = list(content1)
  while count < 1078:
    temp2.append(temp[count])
    count = count + 1 
  
  WRITEBMP(file_output_name, temp2, temp1)
   
file_name= "corn.bmp"
file_in_bmp = file_name
MANUPULATION(file_in_bmp, int('3'), "corn_3.bmp")